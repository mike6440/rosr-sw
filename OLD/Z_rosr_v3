#!/usr/bin/expect --

set PROGRAMNAME Z_rosr
set VERSION 3
set EDITDATE 150411;	#150404
# 
# V1 FROM Z_ROSR V20
puts "
RUN PROGRAM $PROGRAMNAME, VERSION $VERSION, EDITDATE $EDITDATE"

set loguser 0;		#   test 0-quiet, 1=verbose
log_user $loguser;

		# SETUP FILE DEFINED
set setupfile  [lindex $argv 0]
		## SEE IF THE SETUP FILE EXISTS
if [catch {open $setupfile} sufile] {
	puts "Setup file open fails, exit 1"
	exit 1
}
# else {
#	puts "SETUP FILE $setupfile --- EXISTS"
#}

global ROSR ROSRPID ROSRAV ROSRAVPID
global infoname
global GPS GPSPID

#========================================================
		# PROCEDURE TO CONNECT TO ROSR
#============================================================
proc SpawnRosr { hub_url rosrport} {
	global ROSR ROSRPID infoname
	if {$rosrport == 0} {
		set ROSRPID [spawn perl simulate/rosr_simulator]
		set ROSR $spawn_id 
		write_info $infoname "SPAWN ROSR SIMULATE, spawn_id = $ROSR, pid = $ROSRPID"
		send_user "ROSR SIMULATE\n"
	} else {
		set str [spawn_kermit $hub_url $rosrport]
		set ROSR [lindex $str 0];    
		set ROSRPID [lindex $str 1];
		write_info $infoname "SPAWN ROSR KERMIT, IP=$hub_url, port=$rosrport, spawn_id=$ROSR, pid=$ROSRPID"
	}
}

#==========================================
#   PROCEDURE TO START AVGROSR PROGRAM
#==========================================
proc SpawnAvgRosr { setupfile } {
	global ROSRAV  ROSRAVPID infoname
	set ROSRAVPID [spawn perl avgrosr $setupfile]
	set ROSRAV $spawn_id
	write_info $infoname "SPAWN ROSRAV spawn_id = $ROSRAV,  pid=$ROSRAVPID"
			# WAIT FOR THE STARTUP PROMPT
	set timeout 5
	expect {
				# REPLY FROM AVG PROGRAM
		"avgrosr--" {
			send_user "AVGROSR is ready\n"
		}
	}
}

#====================================================================
		# PROCEDURE WRITE_INFO
		# input
		#  fname = fullfile name towrite the info string
		#  str=the string to write
		# call:
		# write_info "/tmp/info" "This is a test."
#=====================================================================
proc write_info {fname str} {
	set str [timestamp -gmt -format "%Y%m%dT%H%M%SZ,"]$str
	exec echo $str >> $fname
	return $str
}

#===========================================================================
# PROCEDURE TO CONNECT TO A PORT USING KERMIT
# input
#	serialport = full path name for the serial port, e.g. /dev/tty.usbserial0
#   baud = desired baud rate, e.g. 9600
#============================================
proc spawn_kermit {hub_url portnumber} {
	global infoname
			# START PROCESS -- KERMIT
	set pid [spawn kermit]
	expect {
		timeout {send_user "KERMIT FAILS TO OPEN\n"; exit 1}
		">>"
	}
	
			# OPEN THE PORT
	send "set host $hub_url $portnumber\r"
	expect ">>"
	send "set tcp keepalive on 0\r\n"
	expect ">>"
	send "set tcp linger OFF\r\n"
	expect ">>"
	send "set tcp nodelay on\r\n"
	expect ">>"
	send "set telnet echo local\r\n"
	expect ">>"
			# this is important for using the rsr menu
			# raw means send CR by itself, not CRLF and NOT CRNul
	send "set telnet newline-mode nvt raw\r\n"
	expect ">>"
			# CONNECT 
	send "connect\r"
	expect {
		timeout {send_user "TIMEOUT, NO CONNECT"; exit 1}
		"Conn*---"  { }  #v15
	}
	set out $spawn_id;
	lappend out $pid
	return $out
}

#==================================
# PROCEDURE TO CONNECT TO GPS 
#==================================
proc SpawnGPS { hub_url gpsport } {
	global GPS GPSPID infoname 
	if {$gpsport == 0} {
		set GPSPID [spawn perl simulate_gps 1]
		set GPS $spawn_id
		write_info $infoname "GPS SIMULATE INPUT, GPS(spawn_id) = $GPS,  GPSID(pid) = $GPSPID"
		send_user "GPS SIMULATE\n"
	} elseif { $gpsport == -1 } {
		write_info $infoname "NO GPS"
		send_user "NO GPS\n"
		set GPS -1;
	} else {
		set str [spawn_kermit $hub_url $gpsport]
		set GPS [lindex $str 0];    set GPSPID [lindex $str 1];
		write_info $infoname "GPS KERMIT spawn_id=$GPS, pid=$GPSPID"
		send_user "GPS KERMIT spawn_id=$GPS, pid=$GPSPID\n"
	}
}

#===================================================================
#   PROCEDURE TO COMPUTE LAT AND LON FROM GPS STRING
# $s2 = gps raw string
# $so = "49.45645,-124.6785"
# 
# $GPRMC,123519,A,4807.038,N,01131.000,E,022.4,084.4,230394,003.1,W*6A
# 
# Where:
#      RMC          Recommended Minimum sentence C
#      123519       Fix taken at 12:35:19 UTC
#      A            Status A=active or V=Void.
#      4807.038,N   Latitude 48 deg 07.038' N
#      01131.000,E  Longitude 11 deg 31.000' E
#      022.4        Speed over the ground in knots
#      084.4        Track angle in degrees True
#      230394       Date - 23rd of March 1994
#      003.1,W      Magnetic Variation
#      *6A          The checksum data, always begins with *
# Note that, as of the 2.3 release of NMEA, there is a new field in the RMC sentence at 
# the end just prior to the checksum. For more information on this field see here.
#===================
proc get_latlonstr {s2} {
	global infoname
	set g [split $s2 ,*]
			## LATITUDE -- CHECK AS A GOOD NUMBER
	set l [lindex $g 3];
	if { ! [string is double $l] } {
		#write_info $infoname "get_latlonstr: GPS lat string, $l, is not a f.p. number";
		set lat -999
	} else {
		set l2 [expr int($l/100)]
		set lat [expr $l2 + ($l - $l2*100)/60]
		if { [string equal -nocase [lindex $g 4] S] } {set lat [expr -$lat] }
		if { $lat < -90 || $lat > 90 } {
			#write_info $infoname  "get_latlonstr: GPS lat out of range, set to missing";
			set lat -999;
		}
	}
	
			## LONGITUDE
	set l [lindex $g 5];
	if { ! [string is double $l] } {
		#write_info $infoname  "get_latlonstr: GPS lon string is not a f.p. number";
		set lon -999
	} else {
		set l2 [expr int($l/100)]
		set lon [expr $l2 + ($l - $l2*100)/60]
		if { [string equal -nocase [lindex $g 6] W] } {set lon [expr -$lon] }
		if { $lon <= -180 || $lon > 360 } {
			#write_info $infoname  "get_latlonstr: GPS lon out of range, set to missing";
			set lon -999;
		}
	}
	
			## SOG
	set sog [lindex $g 7];
	if { ! [string is double $sog] } {
		#write_info $infoname  "get_latlonstr: GPS sog string is not a f.p. number";
		set sog -999
	} else {
		if { $sog < 0 || $sog > 40 } {
			#write_info $infoname  "get_latlonstr: GPS sog out of range, set to missing";
			set sog -999;
		}
	}
	
			## COG
	set cog [lindex $g 8];
	if { ! [string is double $cog] } {
		#write_info $infoname  "get_latlonstr: GPS cog string is not a f.p. number";
		set cog -999
	} else {
		if { $cog < 0 || $cog > 360 } {
			#write_info $infoname  "get_latlonstr: GPS cog out of range, set to missing";
			set cog -999;
		}
	}

			## VAR
	set var [lindex $g 10];
	if { ! [string is double $var] } {
		#write_info $infoname  "get_latlonstr: GPS var string is not a f.p. number";
		set var -999
	} else {
		if { [string equal -nocase [lindex $g 11] W] } {set var [expr -$var] } 
		if { $var < -90 || $var > 90 } {
			#write_info $infoname  "get_latlonstr: GPS var out of range, set to missing";
			set var -999;
		}
	}

	#===========
			#OUTPUT STRING
	#===========
	set posstr [format "%.6f %.6f %.1f %.0f %.1f" $lat $lon $sog $cog $var]
	return $posstr;
}


#===================================================================
# 	PROCEDURE INSERT_GPS
#input
# $s1 = rosr raw string
# $s2 = gps raw string, NMEA GPRMC
# #isn = isar serial number
#  "\$GPRMC,235944,A,4922.9147,N,12418.9757,W,007.7,294.5,030609,019.2,E*61"
#output
# $so is the same as $s1 but with gps data inserted
#=====================================================================
proc insert_gps {s1 s2 isn} {
	set insertgps 0;
	
	if { $isn == 6 } {
		set ilt 25;  set iln 29;
	} else {
		set ilt 30; set iln 34;
	}
	
	#==========
	# check isar for good lat and lon
	#==========
	set i [split $s1 ,*]
	#LAT
	set l [lindex $i $ilt];
	if { ! [string is double $l] } {
		set insertgps 1;
	} elseif {$l < -90 || $l > 90} {
		set insertgps 1;
	}
	
	#LON
	set l [lindex $i [expr $ilt + 1 ] ];
	if { ! [string is double $l] } {
		set insertgps 1;
	} elseif {$l < -180 || $l > 360} {
		set insertgps 1;
	}
	
	#==================
	# BAD ISAR POSITION, USE EXTERNAL GPS
	#==================
	if { $insertgps != 0 } {
		set g [split [get_latlonstr $s2]]
		
		## LATITUDE
		set lat [lindex $g 0]
		## LONGITUDE
		set lon [lindex $g 1]
		## SOG
		set sog [lindex $g 2]
		## COG
		set cog [lindex $g 3]
		## VAR
		set var [lindex $g 4];
	
		# REPLACE THE GPS -- Notice, the index numbers, ilt and iln, are 30 34 for isar04. For isar06 25 29.
		set ir [lreplace $i $ilt $iln $lat $lon $sog $cog $var]		
		# so is the output string
		set s1 [join $ir ,]
	}
	return $s1
}


#==================== END PROCEDURES =============================================

exec echo "START ROSR3 [timestamp -gmt -format "%Y%m%d,%H%M%S"]" > /tmp/sbd

		#============
		# DATAPATH
		#==============
spawn -noecho getsetupinfo $setupfile "RT OUT PATH"
expect -re "(\.*)(\r)";
set datapath $expect_out(1,string)

	# INFONAME
set infoname "$env(DAQDATAFOLDER)/info.txt";
send_user "INFONAME: $infoname\n";
write_info $infoname "  ========== BEGIN PROGRAM $PROGRAMNAME ============="
write_info $infoname "PROGRAM $PROGRAMNAME, Version $VERSION, Editdate $EDITDATE, Runtime [timestamp -gmt -format "%Y%m%d,%H%M%S"]"
write_info $infoname "INFORMATION FILE: $infoname"
write_info $infoname  "RT OUT PATH: $datapath"

	# PDS SERIAL HUB URL AND OFFSET
spawn -noecho getsetupinfo $setupfile "SERIAL HUB URL"
expect -re "(\.*)(\r)";
set hub_url $expect_out(1,string)
write_info $infoname  "SERIAL HUB URL: $hub_url"

	# CALIBRATION FLAG
spawn -noecho getsetupinfo $setupfile "CALIBRATION EMISSIVITY"
expect -re "(\.*)(\r)";
set e_cal $expect_out(1,string)

if { $e_cal == 0 } { 
	write_info $infoname "RUN MODE."
	send_user "RUN MODE.\n"
			## PLATFORM NAME
	spawn -noecho getsetupinfo $setupfile "PLATFORM NAME"
	expect -re "(\.*)(\r)";
	write_info $infoname  "PLATFORM NAME: $expect_out(1,string)"

			## LOCATION ON PLATFORM
	spawn -noecho getsetupinfo $setupfile "LOCATION ON PLATFORM"
	expect -re "(\.*)(\r)";
	write_info $infoname  "LOCATION ON PLATFORM: $expect_out(1,string)"

			## HEIGHT ABOVE SEA LEVEL
	spawn -noecho getsetupinfo $setupfile "HEIGHT ABOVE SEA LEVEL"
	expect -re "(\.*)(\r)";
	write_info $infoname  "HEIGHT ABOVE SEA LEVEL: $expect_out(1,string)"

			## EXPERIMENT NAME
	spawn -noecho getsetupinfo $setupfile "EXPERIMENT NAME"
	expect -re "(\.*)(\r)";
	set expname $expect_out(1,string)
	write_info $infoname  "EXPERIMENT NAME: $expname"

			## GEOGRAPHIC LOCATION
	spawn -noecho getsetupinfo $setupfile "GEOGRAPHIC LOCATION"
	expect -re "(\.*)(\r)";
	write_info $infoname  "GEOGRAPHIC LOCATION: $expect_out(1,string)"

			# GPS FIXED LATITUDE
	spawn -noecho getsetupinfo $setupfile "GPS FIXED LATITUDE"
	expect -re "(\.*)(\r)";
	set fixedlat $expect_out(1,string)
	write_info $infoname  "GPS FIXED LATITUDE: $fixedlat"

			# GPS FIXED LONGITUDE
	spawn -noecho getsetupinfo $setupfile "GPS FIXED LONGITUDE"
	expect -re "(\.*)(\r)";
	set fixedlon $expect_out(1,string)
	write_info $infoname  "GPS FIXED LONGITUDE: $fixedlon"

			## GPS PORT
	spawn -noecho getsetupinfo $setupfile "GPS HUB COM NUMBER"
	expect -re "(\.*)(\r)";
	set gpsport $expect_out(1,string)
	write_info $infoname  "GPS HUB COM NUMBER: $gpsport"

		#	OPEN SERIAL PORTS
	SpawnGPS $hub_url $gpsport 
	send_user "GPS port is open.\n"
} else {
	write_info $infoname "CAL MODE."
	send_user "CALIBRATION MODE.\n"
}

		## ROSR PORT
spawn -noecho getsetupinfo $setupfile "ROSR HUB COM NUMBER"
expect -re "(\.*)(\r)";
set rosrport $expect_out(1,string)
write_info $infoname  "ROSR HUB COM NUMBER: $rosrport"

		#=================
		# OPEN SET FILE NAMES AND NOTE TIME
		#=================
		# day0 = START JULIAN DAY
set day0 0
		# OPEN SERIAL PORTS
SpawnRosr $hub_url $rosrport 
		# OPEN AVG PROGRAMS
SpawnAvgRosr $setupfile 

		#====================
		# TIMING PARAMETERS
		#====================
		# SET dt0 SO THE FIRST AVG WILL BE TRANSMITTED
# set dt0 [expr [timestamp -gmt] -100]
set timeout 30		;# leave enough time for the scan drum to move

		# =====================
		# MAIN LOOP
		#======================
write_info $infoname "===== BEGIN MAIN LOOP ====="

if { $e_cal == 0 && $gpsport >= 0 } {
	set timegps [expr [timestamp -gmt] - 100];	#set timegps so as to skip insert until a good gps.
	send_user "gps time\n";
}

		# !! TO DO - use fixedlat and fixedlon
# if { $e_cal == 0 } {
# 	set gpsstr "\$GPRMC,235944,A,4922.9147,N,12418.9757,W,007.7,294.5,030609,019.2,E*61"
# 	send_user "STARTUP GPS: $gpsstr\n"
# 	set glen [string length $gpsstr]
# 	set timegps [timestamp -gmt]
# }

		#=================
		# EXPECT LOOP
		#=================
while 1 {
		# LOOP TIME $dt
	set dt [timestamp -gmt]
			# CHECK FOR A NEW DAY -- NEW FILES
	set day1 [timestamp -format "%j" -seconds $dt]
	if {$day1 != $day0} {
		set day0 $day1
		set fname [timestamp -format "%y%m%d" -seconds $dt]
		send_user "NEW DAY $fname\n";
		set rwname "$datapath/rosr_raw_$fname.txt";
		set avname "$datapath/rosr_av_$fname.txt";
		set sstname "$datapath/rosr_sst_$fname.txt";
		set gpsrawname "$datapath/gps_raw_$fname.txt";
		write_info $infoname "---NEW DAY $fname---"
		write_info $infoname "rwname = $rwname"
		write_info $infoname "avname = $avname"
		write_info $infoname "sstname = $sstname"
 		write_info $infoname "gpsrawname = $gpsrawname"
	}
	
			#================
			# EXPECT FUNCTION -- WAITING FOR RESPONSE
			# ===============
	expect { 		

				#============
				#  GPS SECTION 
		-i $GPS
		"\\\$GPRMC*\\*??"  {
			set rawstr $expect_out(0,string);
			set rawstr [string trim $rawstr ]
			set timegps [timestamp] ;# record the time of the last gps
			set timegpslast $timegps;
			send_user "$rawstr\n"
		}
		
		-i $ROSR 
		-re "\\\$WIR...*\\*.." {
			set rawstr [string trimright $expect_out(0,string)]
			if { [string match {\$WIROS*} $rawstr ] } {
				set s1 [string first "\$WIROS" $rawstr];
				set s2 [string first "\*" $rawstr $s1]
				set str [string range $rawstr $s1 [expr $s2+2]]
				send_user "$str\n"; 
				set F [open $rwname a 0600]
				puts $F [timestamp -gmt -format "%Y,%m,%d,%H,%M,%S,"]$rawstr  ;
				close $F
				# SEND TO ROSRAV AND ROSRAV FOR RESPONSE
				send -i $ROSRAV "$rawstr\r\n"
			} 
			if { [string match {*\$WIRAV*} $rawstr ] } {
				set s1 [string first "\$WIRAV" $rawstr];
				set s2 [string first "\*" $rawstr $s1]
				set str [string range $rawstr $s1 [expr $s2+2]]
				send_user "$str\n"; 
				set F [open $avname a 0600]
				puts $F [timestamp -gmt -format "%Y,%m,%d,%H,%M,%S,"]$str  ;
				close $F
			} 
			if { [string match {*\$WIRST*} $rawstr ] } {
				set s1 [string first "\$WIRST" $rawstr];
				set s2 [string first "\*" $rawstr $s1]
				set str [string range $rawstr $s1 [expr $s2+2]]
				send_user "$str\n"; 
				set F [open $sstname a 0600]
				puts $F [timestamp -gmt -format "%Y,%m,%d,%H,%M,%S,"]$str  ;
				close $F
			} 
			#===================
			# SEND TO ROSRAV AND ROSRAV FOR RESPONSE
			#===================
			send -i $ROSRAV "$rawstr\r\n"
		}
			#=========== 
			#  USER INPUT 
			#=============
		-i $user_spawn_id  
		"hr" {
			#$WIROS,279.98, 155854,17.75,2.836,2.840,0.390,2.470,2.838,2.837,1.731,2.768,
			#4.096,3.569,-0.000,2.652,4.939,17.71,17.74,17.77,17.77,-1.3,-1.8,
			#17.1,21.4,19.1,41.0,14.3,-0.0,  0*4B
			send_user "\$WIROS, drum, rad, kttemp, vb11, vb12, vkt15, vref/2, vb21, vb22, vtmir, vtwin, \n";
			send_user "vtkt15, vin/4, vrain, vtkt, vref, t11, t12, t21, t22, pitch, roll, \n";
			send_user "tkt, tktcase, twindow, tmirror, vin, vrain, secs, * checksum\n"; 
		}
		"ha" {
			send_user "\$WIRAV, vav0, vav1, vav2, vav3, k0, k1, k2, k3, ksd0, ksd1, ksd2, ksd3,\n";
			send_user "t11, t12, t21, t22, tsd11, tsd12, tsd21, tsd22, T1, T2,\n";
			send_user "pav, psd, rav, rsd, ang, emis\*chk\n";
		}
		"hs" {
			send_user "\$WIRST, vav0, vav1, vav2, vav3, k0, k1, k2, k3, T1, T2, ang, emis, ssst*chk\n";
		}
		"q" { exit }
	}
}

