#!/usr/bin/expect --

# === NOTES ======================
# SEND SCS TO HUB PORT 5 AS TCP/IP FOR SCS
# Output log = /tmp/scslog
# === end ========================


# === CRONTAB -E ==================
#MAILTO=""
#BASH_ENV="$HOME/.bashrc"
#SHELL=/bin/bash
#6,16,26,36,46,56 * * * * $DAQSWFOLDER/sbd2scs >> /tmp/scslog
#====== END =========================

log_user 0

		# SETUP FILE DEFINED
set Date [exec date -u "+%Y%m%dT%H%M%SZ"];
set setupfile "$env(HOME)/swmain/apps/ROSR/sw/setup/su.txt"
		## SEE IF THE SETUP FILE EXISTS
if [catch {open $setupfile} sufile] {
	puts "Setup file, $setupfile, open fails, exit 1"
	exit 1
}

global SCS SCSPID
#===================================
# PROCEDURE TO CONNECT TO SCS  v13
#===================================
proc SpawnSCS { hubip scsport }  {
	global SCS SCSPID
	set str [spawn_kermit $hubip $scsport]
	set SCS [lindex $str 0];
	set SCSPID [lindex $str 1];
	send_user "scs=$SCS,  scspid=$SCSPID\n";
}
#===========================================================================
# PROCEDURE TO CONNECT TO A PORT USING KERMIT
# input
#	serialport = full path name for the serial port, e.g. /dev/tty.usbserial0
#   baud = desired baud rate, e.g. 9600
#============================================
proc spawn_kermit {hubip portnumber} {
			# START PROCESS -- KERMIT
	send_user "spawn_kermit called, hubip=$hubip,  portnumber=$portnumber\n";
	set timeout 3
	set pid [spawn kermit]
	expect {
		timeout {send_user "KERMIT FAILS TO OPEN\n"; exit 1}
		">>"
	}
	
	send_user "test OPEN PORT $hubip  $portnumber\n";
			# OPEN THE PORT
	send "set host $hubip $portnumber\r"
	expect ">>"
	send_user "test1\n";
# 	send "set tcp keepalive on\r\n"
# 	expect ">>"
# 	send "set tcp linger off\r\n"
# 	expect ">>"
# 	send "set tcp nodelay on\r\n"
# 	expect ">>"
# 	send "set telnet echo remote\r\n"
# 	expect ">>"
			# this is important for using the rsr menu
			# raw means send CR by itself, not CRLF and NOT CRNul
# 	send "set telnet newline-mode nvt raw\r\n"
# 	expect ">>"
			# CONNECT 
	send "connect\r"
	expect {
		timeout {send_user "TIMEOUT, NO CONNECT"; exit 1}
		"Conn*---"  { }  #v15
	}
	#send_user "spawn_kermit spawn_id = $spawn_id,   pid = $pid\n";
	set out $spawn_id;
	lappend out $pid
	return $out
}
#==================== END PROCEDURES =============================================

		# PDS SERIAL HUB URL
spawn -noecho getsetupinfo $setupfile "SERIAL HUB URL"
expect -re "(\.*)(\r)";
set hubip $expect_out(1,string)
send_user "hubip = $hubip\n";

		## SCSPORT
spawn -noecho getsetupinfo $setupfile "SCS HUB TXD PORT"
expect -re "(\.*)(\r)";
set scsport $expect_out(1,string)
send_user "SCS HUB TXD PORT = $scsport\n";


#  Open SCS: ==>> $SCS and $SCSPID
SpawnSCS $hubip $scsport

		#=====================
		# SEND SIGNON MESSAGE
		#====================
# set scsmessage [ exec head -1 /tmp/sbd ]
# send_user "Sending $scsmessage\n";
# 
set spawn_id $SCS
send "AA This is a test\n";
# if { $scsport >= 0 } { 
# 	#send -i $SCS $scsmessage
# 	send "AA This is a test\n";
# 	send_user "Test2\n";
# }

exit;
